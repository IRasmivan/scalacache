package scalacache

import scalacache.memoization.MemoizationConfig
import scala.concurrent.duration.Duration
import scala.language.higherKinds

trait MemoizingCache[F[_], V] {
  this: Cache[F, String, V] =>

  implicit val config: MemoizationConfig

  // Optimised methods for use by memoize: we know the key will be a single string so we can avoid some work.
  // These are public because calls to them are generated by the memoize macro.

  def cachingForMemoize(baseKey: String)(ttl: Option[Duration] = None)(f: => V)(implicit flags: Flags): F[V] =
    caching(baseKey)(ttl)(f)

  def cachingForMemoizeF(baseKey: String)(ttl: Option[Duration])(f: F[V])(implicit flags: Flags): F[V] =
    cachingF(baseKey)(ttl)(f)
}
